{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "RandomNumberCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RandomNumberRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "fulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRequestId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestFee",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "requestFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        }
      ],
      "name": "isRequestComplete",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isCompleted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        }
      ],
      "name": "randomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "randomNum",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "lockBlock",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seed",
          "type": "uint256"
        }
      ],
      "name": "requestRandomness",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyhash",
          "type": "bytes32"
        }
      ],
      "name": "setKeyhash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x11BA3d40F7549485D5B821217E3f4474Ae90FeCd",
    "contractAddress": "0x7f0BA078DbF03932419afa5b26A5Df4a29dCdbdA",
    "transactionIndex": 2,
    "gasUsed": "785402",
    "logsBloom": "0x
    "blockHash": "0xd9e3a51fdeda49058b71e7bc7769ce1004bd3605efc72d3b087b0c153b458aec",
    "transactionHash": "0x26d76dd46308d2f6e1970b9d67e6d7298bb5c352f531f748505ab435180bb41c",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 8498382,
        "transactionHash": "0x26d76dd46308d2f6e1970b9d67e6d7298bb5c352f531f748505ab435180bb41c",
        "address": "0x7f0BA078DbF03932419afa5b26A5Df4a29dCdbdA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011ba3d40f7549485d5b821217e3f4474ae90fecd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd9e3a51fdeda49058b71e7bc7769ce1004bd3605efc72d3b087b0c153b458aec"
      }
    ],
    "blockNumber": 8498382,
    "cumulativeGasUsed": "1563083",
    "status": 1,
    "byzantium": true
  },
  "address": "0x7f0BA078DbF03932419afa5b26A5Df4a29dCdbdA",
  "args": [
    "0xf720CF1B963e0e7bE9F58fd471EFa67e7bF00cfb",
    "0x20fE562d797A42Dcb3399062AE9546cd06f63280"
  ],
  "solidityMetadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"RandomNumberCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomNumberRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"fulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRequestId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"}],\"name\":\"isRequestComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"}],\"name\":\"randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNum\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockBlock\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"requestRandomness\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"}],\"name\":\"setKeyhash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"constructor\":{\"details\":\"Public constructor\"},\"fulfillRandomness(bytes32,uint256)\":{\"details\":\"The VRF Coordinator will only send this function verified responses.The VRF Coordinator will not pass randomness that could not be verified.\"},\"isRequestComplete(uint32)\":{\"details\":\"For time-delayed requests, this function is used to check/confirm completion\",\"params\":{\"requestId\":\"The ID of the request used to get the results of the RNG service\"},\"returns\":{\"isCompleted\":\"True if the request has completed and a random number is available, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"randomNumber(uint32)\":{\"params\":{\"requestId\":\"The ID of the request used to get the results of the RNG service\"},\"returns\":{\"randomNum\":\"The random number\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestRandomNumber()\":{\"details\":\"Some services will complete the request immediately, others may have a time-delaySome services require payment in the form of a token, such as $LINK for Chainlink VRF\",\"returns\":{\"lockBlock\":\"The block number at which the RNG service will start generating time-delayed randomness.  The calling contract should \\\"lock\\\" all activity until the result is available via the `requestId`\",\"requestId\":\"The ID of the request used to get the results of the RNG service\"}},\"requestRandomness(bytes32,uint256,uint256)\":{\"details\":\"The source of the seed data must be something which the oraclecannot anticipate. See \\\"SECURITY CONSIDERATIONS\\\" above.The fulfillRandomness method receives the output, once it's providedby the Oracle, and verified by the vrfCoordinator.The _keyHash must already be registered with the VRFCoordinator, andthe _fee must exceed the fee specified during registration of the_keyHash.The returned requestId can be used to distinguish responses to *concurrent requests. It is passed as the first argument tofulfillRandomness.\",\"params\":{\"_fee\":\"The amount of LINK to send with the request\",\"_keyHash\":\"ID of public key against which randomness is generated\",\"_seed\":\"Random seed from which output randomness is determined\"},\"returns\":{\"requestId\":\"which will be returned with the response to this request\"}},\"setFee(uint256)\":{\"params\":{\"_fee\":\"The fee to be charged for a request\"}},\"setKeyhash(bytes32)\":{\"params\":{\"_keyhash\":\"The keyhash to be used by the VRF\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{\"fulfillRandomness(bytes32,uint256)\":{\"notice\":\"Callback function used by VRF Coordinator\"},\"getLastRequestId()\":{\"notice\":\"Gets the last request id used by the RNG service\"},\"getRequestFee()\":{\"notice\":\"Gets the Fee for making a Request against an RNG service\"},\"isRequestComplete(uint32)\":{\"notice\":\"Checks if the request for randomness from the 3rd-party service has completed\"},\"randomNumber(uint32)\":{\"notice\":\"Gets the random number produced by the 3rd-party service\"},\"requestRandomNumber()\":{\"notice\":\"Sends a request for a random number to the 3rd-party service\"},\"requestRandomness(bytes32,uint256,uint256)\":{\"notice\":\"requestRandomness initiates a request for VRF output given _seed\"},\"setFee(uint256)\":{\"notice\":\"Allows governance to set the fee per request required by the VRF\"},\"setKeyhash(bytes32)\":{\"notice\":\"Allows governance to set the VRF keyhash\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/RNGChainlink.sol\":\"RNGChainlink\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\nimport \\\"./vendor/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerInterface, and can\\n * @dev initialize VRFConsumerInterface's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev To increase trust in your contract, the source of your seeds should be\\n * @dev hard for anyone to influence or predict. Any party who can influence\\n * @dev them could in principle collude with the oracle (who can instantly\\n * @dev compute the VRF output for any given seed) to bias the outcomes from\\n * @dev your contract in their favor. For instance, the block hash is a natural\\n * @dev choice of seed for many applications, but miners in control of a\\n * @dev substantial fraction of hashing power and with access to VRF outputs\\n * @dev could check the result of prospective block hashes as they are mined,\\n * @dev and decide not to publish a block if they don't like the outcome it will\\n * @dev lead to.\\n *\\n * @dev On the other hand, using block hashes as the seed makes it particularly\\n * @dev easy to estimate the economic cost to a miner for this kind of cheating\\n * @dev (namely, the block reward and transaction fees they forgo by refraining\\n * @dev from publishing a block.)\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it.\\n   *\\n   * @dev The VRFCoordinator expects a calling contract to have a method with\\n   * @dev this signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness.\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n    external virtual;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The source of the seed data must be something which the oracle\\n   * @dev cannot anticipate. See \\\"SECURITY CONSIDERATIONS\\\" above.\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   * @param _seed Random seed from which output randomness is determined\\n   *\\n   * @return requestId which will be returned with the response to this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to *\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\\n    public returns (bytes32 requestId)\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\\n    // This is the seed actually passed to the VRF in VRFCoordinator\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest)\\n    nonces[_keyHash] = nonces[_keyHash].add(1); \\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal LINK;\\n  address internal vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) public nonces;\\n  constructor(address _vrfCoordinator, address _link) public {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n}\\n\",\"keccak256\":\"0x4f11454a9aba62b25892d9af59978ca58de6822557fa8bee0fda539753bde9c4\"},\"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition against the\\n   * @dev user-supplied seed, that seed is combined in a hash with the a\\n   * @dev user-specific nonce, and the address of the consuming contract.\\n   *\\n   * @dev Of course, crucial security guranatees would be broken by repetition\\n   * @dev of the user-supplied seed, as all the other inputs can be anticipated\\n   * @dev and the user-specified seed is public once the initial request is\\n   * @dev made, so if the oracle has reason to belive that a user-specified seed\\n   * @dev will be repeated, it may be able to anticipate its future outputs. So\\n   * @dev it may make sense, for certain applications, for the VRF framework to\\n   * @dev simply refuse to operate, if given a seed it's seen before.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\\n    address _requester, uint256 _nonce)\\n    internal pure returns (uint256)\\n  {\\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x99e84f71d4067f8d29474689feb5b6d90f5c2370ebe526161dd6fe709a3947c3\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xdbf46b45a4c9f38ba71a0391aed0e7b108854b619f292d907ae537228868bda6\"},\"@chainlink/contracts/src/v0.6/vendor/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x95dbe2dd5ab8682b99bc3d7d297b621d4237442da160f78d3323ee5c4a06ded3\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xf06035c6398edfcb048e31e6cb7f485c203230a037e21b4aad337abd8ee896a3\"},\"contracts/RNGChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\\\";\\n\\nimport \\\"./RNGInterface.sol\\\";\\n\\ncontract RNGChainlink is RNGInterface, VRFConsumerBase, Ownable {\\n  using SafeMath for uint256;\\n  using SafeCast for uint256;\\n\\n  /// @dev The keyhash used by the Chainlink VRF\\n  bytes32 internal keyHash;\\n\\n  /// @dev The request fee of the Chainlink VRF\\n  uint256 internal fee;\\n\\n  /// @dev A counter for the number of requests made used for request ids\\n  uint32 internal requestCount;\\n\\n  /// @dev A list of random numbers from past requests mapped by request id\\n  mapping(uint32 => uint256) internal randomNumbers;\\n\\n  /// @dev A list of blocks to be locked at based on past requests mapped by request id\\n  mapping(uint32 => uint32) internal requestLockBlock;\\n\\n  /// @dev A mapping from Chainlink request ids to internal request ids\\n  mapping(bytes32 => uint32) internal chainlinkRequestIds;\\n\\n  /// @dev Ensure calls are made only by the VRF Coordinator\\n  modifier onlyVRFCoordinator {\\n    require(msg.sender == vrfCoordinator, \\\"RNGChainlink/invalid-vrf-coordinator\\\");\\n    _;\\n  }\\n\\n  /// @dev Public constructor\\n  constructor(address _vrfCoordinator, address _link)\\n    public\\n    VRFConsumerBase(_vrfCoordinator, _link)\\n  {\\n  }\\n\\n  /// @notice Allows governance to set the VRF keyhash\\n  /// @param _keyhash The keyhash to be used by the VRF\\n  function setKeyhash(bytes32 _keyhash) external onlyOwner {\\n    keyHash = _keyhash;\\n  }\\n\\n  /// @notice Allows governance to set the fee per request required by the VRF\\n  /// @param _fee The fee to be charged for a request\\n  function setFee(uint256 _fee) external onlyOwner {\\n    fee = _fee;\\n  }\\n\\n  /// @notice Gets the last request id used by the RNG service\\n  /// @return requestId The last request id used in the last request\\n  function getLastRequestId() external override view returns (uint32 requestId) {\\n    return requestCount;\\n  }\\n\\n  /// @notice Gets the Fee for making a Request against an RNG service\\n  /// @return feeToken The address of the token that is used to pay fees\\n  /// @return requestFee The fee required to be paid to make a request\\n  function getRequestFee() external override view returns (address feeToken, uint256 requestFee) {\\n    return (address(LINK), fee);\\n  }\\n\\n  /// @notice Sends a request for a random number to the 3rd-party service\\n  /// @dev Some services will complete the request immediately, others may have a time-delay\\n  /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\\n  /// @return requestId The ID of the request used to get the results of the RNG service\\n  /// @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.  The calling contract\\n  /// should \\\"lock\\\" all activity until the result is available via the `requestId`\\n  function requestRandomNumber() external override returns (uint32 requestId, uint32 lockBlock) {\\n    uint256 seed = _getSeed();\\n    lockBlock = uint32(block.number);\\n\\n    // collect fee for payment\\n    require(LINK.transferFrom(msg.sender, address(this), fee), \\\"RNGChainlink/fee-transfer-failed\\\");\\n\\n    // send request (costs fee)\\n    requestId = _requestRandomness(seed);\\n\\n    requestLockBlock[requestId] = lockBlock;\\n\\n    emit RandomNumberRequested(requestId, msg.sender);\\n  }\\n\\n  /// @notice Checks if the request for randomness from the 3rd-party service has completed\\n  /// @dev For time-delayed requests, this function is used to check/confirm completion\\n  /// @param requestId The ID of the request used to get the results of the RNG service\\n  /// @return isCompleted True if the request has completed and a random number is available, false otherwise\\n  function isRequestComplete(uint32 requestId) external override view returns (bool isCompleted) {\\n    return block.number > requestLockBlock[requestId];\\n  }\\n\\n  /// @notice Gets the random number produced by the 3rd-party service\\n  /// @param requestId The ID of the request used to get the results of the RNG service\\n  /// @return randomNum The random number\\n  function randomNumber(uint32 requestId) external override returns (uint256 randomNum) {\\n    return randomNumbers[requestId];\\n  }\\n\\n  /// @dev Requests a new random number from the Chainlink VRF\\n  /// @dev The result of the request is returned in the function `fulfillRandomness`\\n  /// @param seed The seed used as entropy for the request\\n  function _requestRandomness(uint256 seed) internal returns (uint32 requestId) {\\n    // Get next request ID\\n    requestId = _getNextRequestId();\\n\\n    // Complete request\\n    bytes32 vrfRequestId = requestRandomness(keyHash, fee, seed);\\n    chainlinkRequestIds[vrfRequestId] = requestId;\\n  }\\n\\n  /// @notice Callback function used by VRF Coordinator\\n  /// @dev The VRF Coordinator will only send this function verified responses.\\n  /// @dev The VRF Coordinator will not pass randomness that could not be verified.\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) external override onlyVRFCoordinator {\\n    uint32 internalRequestId = chainlinkRequestIds[requestId];\\n    _storeResult(internalRequestId, randomness.mod(20).add(1));\\n  }\\n\\n  /// @dev Gets the next consecutive request ID to be used\\n  /// @return requestId The ID to be used for the next request\\n  function _getNextRequestId() internal returns (uint32 requestId) {\\n    requestCount = uint256(requestCount).add(1).toUint32();\\n    requestId = requestCount;\\n  }\\n\\n  /// @dev Gets a seed for a random number from the latest available blockhash\\n  /// @return seed The seed to be used for generating a random number\\n  function _getSeed() internal virtual view returns (uint256 seed) {\\n    return uint256(blockhash(block.number - 1));\\n  }\\n\\n  /// @dev Stores the latest random number by request ID and logs the event\\n  /// @param requestId The ID of the request to store the random number\\n  /// @param result The random number for the request ID\\n  function _storeResult(uint32 requestId, uint256 result) internal {\\n    // Store random value\\n    randomNumbers[requestId] = result;\\n\\n    emit RandomNumberCompleted(requestId, result);\\n  }\\n}\\n\",\"keccak256\":\"0xaad9735543b6f138b98bf62349b48b78989b3e1e80fbc0cf40b453709c10eedf\"},\"contracts/RNGInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Random Number Generator Interface\\n/// @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\\ninterface RNGInterface {\\n\\n  /// @notice Emitted when a new request for a random number has been submitted\\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\\n  /// @param sender The indexed address of the sender of the request\\n  event RandomNumberRequested(uint32 indexed requestId, address indexed sender);\\n\\n  /// @notice Emitted when an existing request for a random number has been completed\\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\\n  /// @param randomNumber The random number produced by the 3rd-party service\\n  event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\\n\\n  /// @notice Gets the last request id used by the RNG service\\n  /// @return requestId The last request id used in the last request\\n  function getLastRequestId() external view returns (uint32 requestId);\\n\\n  /// @notice Gets the Fee for making a Request against an RNG service\\n  /// @return feeToken The address of the token that is used to pay fees\\n  /// @return requestFee The fee required to be paid to make a request\\n  function getRequestFee() external view returns (address feeToken, uint256 requestFee);\\n\\n  /// @notice Sends a request for a random number to the 3rd-party service\\n  /// @dev Some services will complete the request immediately, others may have a time-delay\\n  /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\\n  /// @return requestId The ID of the request used to get the results of the RNG service\\n  /// @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.  The calling contract\\n  /// should \\\"lock\\\" all activity until the result is available via the `requestId`\\n  function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock);\\n\\n  /// @notice Checks if the request for randomness from the 3rd-party service has completed\\n  /// @dev For time-delayed requests, this function is used to check/confirm completion\\n  /// @param requestId The ID of the request used to get the results of the RNG service\\n  /// @return isCompleted True if the request has completed and a random number is available, false otherwise\\n  function isRequestComplete(uint32 requestId) external view returns (bool isCompleted);\\n\\n  /// @notice Gets the random number produced by the 3rd-party service\\n  /// @param requestId The ID of the request used to get the results of the RNG service\\n  /// @return randomNum The random number\\n  function randomNumber(uint32 requestId) external returns (uint256 randomNum);\\n}\\n\",\"keccak256\":\"0xf917c68439d7476cd226f475e8fce940e0cf1d32cb0ff12e8537072a07f2b1da\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ce8380380610ce88339818101604052604081101561003357600080fd5b508051602090910151600180546001600160a01b038085166001600160a01b031992831617909255600080549284169290911691909117815561007d6001600160e01b036100d216565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35050506100d6565b3390565b610c03806100e56000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063715018a61161008c5780639d2a5f98116100665780639d2a5f981461020d5780639e317f1214610242578063dc6cfe101461025f578063f2fde38b14610288576100cf565b8063715018a6146101b65780638678a7b2146101be5780638da5cb5b146101e9576100cf565b80630d37b537146100d457806319c2b4c3146100ff5780631f1f897f146101205780633a19b9bc146101455780636309b7731461017c57806369fe0e2d14610199575b600080fd5b6100dc6102ae565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6101076102c2565b6040805163ffffffff9092168252519081900360200190f35b6101436004803603604081101561013657600080fd5b50803590602001356102ce565b005b6101686004803603602081101561015b57600080fd5b503563ffffffff16610361565b604080519115158252519081900360200190f35b6101436004803603602081101561019257600080fd5b503561037e565b610143600480360360208110156101af57600080fd5b50356103db565b610143610438565b6101c66104da565b6040805163ffffffff938416815291909216602082015281519081900390910190f35b6101f161062d565b604080516001600160a01b039092168252519081900360200190f35b6102306004803603602081101561022357600080fd5b503563ffffffff1661063c565b60408051918252519081900360200190f35b6102306004803603602081101561025857600080fd5b5035610654565b6102306004803603606081101561027557600080fd5b5080359060208101359060400135610666565b6101436004803603602081101561029e57600080fd5b50356001600160a01b03166107dd565b6000546005546001600160a01b0390911691565b60065463ffffffff1690565b6001546001600160a01b031633146103175760405162461bcd60e51b8152600401808060200182810382526024815260200180610b646024913960400191505060405180910390fd5b60008281526009602052604090205463ffffffff9081169061035c9082906103579060019061034b9087906014906108d616565b9063ffffffff61093b16565b61099c565b505050565b63ffffffff90811660009081526008602052604090205416431190565b6103866109ed565b6003546001600160a01b039081169116146103d6576040805162461bcd60e51b81526020600482018190526024820152600080516020610b88833981519152604482015290519081900360640190fd5b600455565b6103e36109ed565b6003546001600160a01b03908116911614610433576040805162461bcd60e51b81526020600482018190526024820152600080516020610b88833981519152604482015290519081900360640190fd5b600555565b6104406109ed565b6003546001600160a01b03908116911614610490576040805162461bcd60e51b81526020600482018190526024820152600080516020610b88833981519152604482015290519081900360640190fd5b6003546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380546001600160a01b0319169055565b60008060006104e76109f1565b60008054600554604080516323b872dd60e01b81523360048201523060248201526044810192909252514396509394506001600160a01b03909116926323b872dd92606480840193602093929083900390910190829087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b505050506040513d602081101561057657600080fd5b50516105c9576040805162461bcd60e51b815260206004820181905260248201527f524e47436861696e6c696e6b2f6665652d7472616e736665722d6661696c6564604482015290519081900360640190fd5b6105d2816109fa565b63ffffffff818116600081815260086020526040808220805463ffffffff1916948816949094179093559151929550339290917fcf635b20f2defc1e71326dc4f0b616fa676e29a5bae87da19fcaddc550b33f0391a3509091565b6003546001600160a01b031690565b63ffffffff1660009081526007602052604090205490565b60026020526000908152604090205481565b60008054600154604080516020808201899052818301879052825180830384018152606080840194859052630200057560e51b9094526001600160a01b0394851660648401818152608485018b905260a48501958652825160c486015282519690971696634000aea09691958b9593949193909260e4909101918501908083838d5b838110156107005781810151838201526020016106e8565b50505050905090810190601f16801561072d5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561074e57600080fd5b505af1158015610762573d6000803e3d6000fd5b505050506040513d602081101561077857600080fd5b505060008481526002602052604081205461079890869085903090610a3e565b6000868152600260205260409020549091506107bb90600163ffffffff61093b16565b6000868152600260205260409020556107d48582610a85565b95945050505050565b6107e56109ed565b6003546001600160a01b03908116911614610835576040805162461bcd60e51b81526020600482018190526024820152600080516020610b88833981519152604482015290519081900360640190fd5b6001600160a01b03811661087a5760405162461bcd60e51b8152600401808060200182810382526026815260200180610b3e6026913960400191505060405180910390fd5b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008161092a576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b81838161093357fe5b069392505050565b600082820183811015610995576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b63ffffffff8216600081815260076020908152604091829020849055815184815291517f629394f18de7accce1179c28c39be59503a57cbcf45980a2772743b041b362719281900390910190a25050565b3390565b60001943014090565b6000610a04610ab1565b90506000610a1760045460055485610666565b6000908152600960205260409020805463ffffffff191663ffffffff841617905550919050565b60408051602080820196909652808201949094526001600160a01b039290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600654600090610ad690610ad19063ffffffff9081169060019061093b16565b610af4565b6006805463ffffffff191663ffffffff928316179081905516919050565b60006401000000008210610b395760405162461bcd60e51b8152600401808060200182810382526026815260200180610ba86026913960400191505060405180910390fd5b509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373524e47436861696e6c696e6b2f696e76616c69642d7672662d636f6f7264696e61746f724f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657253616665436173743a2076616c756520646f65736e27742066697420696e2033322062697473a2646970667358221220dd9113141c91efd6a4a31e6043e53df2355f16051bc4617754aa5482eb40700364736f6c63430006060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063715018a61161008c5780639d2a5f98116100665780639d2a5f981461020d5780639e317f1214610242578063dc6cfe101461025f578063f2fde38b14610288576100cf565b8063715018a6146101b65780638678a7b2146101be5780638da5cb5b146101e9576100cf565b80630d37b537146100d457806319c2b4c3146100ff5780631f1f897f146101205780633a19b9bc146101455780636309b7731461017c57806369fe0e2d14610199575b600080fd5b6100dc6102ae565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6101076102c2565b6040805163ffffffff9092168252519081900360200190f35b6101436004803603604081101561013657600080fd5b50803590602001356102ce565b005b6101686004803603602081101561015b57600080fd5b503563ffffffff16610361565b604080519115158252519081900360200190f35b6101436004803603602081101561019257600080fd5b503561037e565b610143600480360360208110156101af57600080fd5b50356103db565b610143610438565b6101c66104da565b6040805163ffffffff938416815291909216602082015281519081900390910190f35b6101f161062d565b604080516001600160a01b039092168252519081900360200190f35b6102306004803603602081101561022357600080fd5b503563ffffffff1661063c565b60408051918252519081900360200190f35b6102306004803603602081101561025857600080fd5b5035610654565b6102306004803603606081101561027557600080fd5b5080359060208101359060400135610666565b6101436004803603602081101561029e57600080fd5b50356001600160a01b03166107dd565b6000546005546001600160a01b0390911691565b60065463ffffffff1690565b6001546001600160a01b031633146103175760405162461bcd60e51b8152600401808060200182810382526024815260200180610b646024913960400191505060405180910390fd5b60008281526009602052604090205463ffffffff9081169061035c9082906103579060019061034b9087906014906108d616565b9063ffffffff61093b16565b61099c565b505050565b63ffffffff90811660009081526008602052604090205416431190565b6103866109ed565b6003546001600160a01b039081169116146103d6576040805162461bcd60e51b81526020600482018190526024820152600080516020610b88833981519152604482015290519081900360640190fd5b600455565b6103e36109ed565b6003546001600160a01b03908116911614610433576040805162461bcd60e51b81526020600482018190526024820152600080516020610b88833981519152604482015290519081900360640190fd5b600555565b6104406109ed565b6003546001600160a01b03908116911614610490576040805162461bcd60e51b81526020600482018190526024820152600080516020610b88833981519152604482015290519081900360640190fd5b6003546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380546001600160a01b0319169055565b60008060006104e76109f1565b60008054600554604080516323b872dd60e01b81523360048201523060248201526044810192909252514396509394506001600160a01b03909116926323b872dd92606480840193602093929083900390910190829087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b505050506040513d602081101561057657600080fd5b50516105c9576040805162461bcd60e51b815260206004820181905260248201527f524e47436861696e6c696e6b2f6665652d7472616e736665722d6661696c6564604482015290519081900360640190fd5b6105d2816109fa565b63ffffffff818116600081815260086020526040808220805463ffffffff1916948816949094179093559151929550339290917fcf635b20f2defc1e71326dc4f0b616fa676e29a5bae87da19fcaddc550b33f0391a3509091565b6003546001600160a01b031690565b63ffffffff1660009081526007602052604090205490565b60026020526000908152604090205481565b60008054600154604080516020808201899052818301879052825180830384018152606080840194859052630200057560e51b9094526001600160a01b0394851660648401818152608485018b905260a48501958652825160c486015282519690971696634000aea09691958b9593949193909260e4909101918501908083838d5b838110156107005781810151838201526020016106e8565b50505050905090810190601f16801561072d5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561074e57600080fd5b505af1158015610762573d6000803e3d6000fd5b505050506040513d602081101561077857600080fd5b505060008481526002602052604081205461079890869085903090610a3e565b6000868152600260205260409020549091506107bb90600163ffffffff61093b16565b6000868152600260205260409020556107d48582610a85565b95945050505050565b6107e56109ed565b6003546001600160a01b03908116911614610835576040805162461bcd60e51b81526020600482018190526024820152600080516020610b88833981519152604482015290519081900360640190fd5b6001600160a01b03811661087a5760405162461bcd60e51b8152600401808060200182810382526026815260200180610b3e6026913960400191505060405180910390fd5b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008161092a576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b81838161093357fe5b069392505050565b600082820183811015610995576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b63ffffffff8216600081815260076020908152604091829020849055815184815291517f629394f18de7accce1179c28c39be59503a57cbcf45980a2772743b041b362719281900390910190a25050565b3390565b60001943014090565b6000610a04610ab1565b90506000610a1760045460055485610666565b6000908152600960205260409020805463ffffffff191663ffffffff841617905550919050565b60408051602080820196909652808201949094526001600160a01b039290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600654600090610ad690610ad19063ffffffff9081169060019061093b16565b610af4565b6006805463ffffffff191663ffffffff928316179081905516919050565b60006401000000008210610b395760405162461bcd60e51b8152600401808060200182810382526026815260200180610ba86026913960400191505060405180910390fd5b509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373524e47436861696e6c696e6b2f696e76616c69642d7672662d636f6f7264696e61746f724f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657253616665436173743a2076616c756520646f65736e27742066697420696e2033322062697473a2646970667358221220dd9113141c91efd6a4a31e6043e53df2355f16051bc4617754aa5482eb40700364736f6c63430006060033",
  "userdoc": {
    "methods": {
      "fulfillRandomness(bytes32,uint256)": {
        "notice": "Callback function used by VRF Coordinator"
      },
      "getLastRequestId()": {
        "notice": "Gets the last request id used by the RNG service"
      },
      "getRequestFee()": {
        "notice": "Gets the Fee for making a Request against an RNG service"
      },
      "isRequestComplete(uint32)": {
        "notice": "Checks if the request for randomness from the 3rd-party service has completed"
      },
      "randomNumber(uint32)": {
        "notice": "Gets the random number produced by the 3rd-party service"
      },
      "requestRandomNumber()": {
        "notice": "Sends a request for a random number to the 3rd-party service"
      },
      "requestRandomness(bytes32,uint256,uint256)": {
        "notice": "requestRandomness initiates a request for VRF output given _seed"
      },
      "setFee(uint256)": {
        "notice": "Allows governance to set the fee per request required by the VRF"
      },
      "setKeyhash(bytes32)": {
        "notice": "Allows governance to set the VRF keyhash"
      }
    }
  },
  "devdoc": {
    "methods": {
      "constructor": {
        "details": "Public constructor"
      },
      "fulfillRandomness(bytes32,uint256)": {
        "details": "The VRF Coordinator will only send this function verified responses.The VRF Coordinator will not pass randomness that could not be verified."
      },
      "isRequestComplete(uint32)": {
        "details": "For time-delayed requests, this function is used to check/confirm completion",
        "params": {
          "requestId": "The ID of the request used to get the results of the RNG service"
        },
        "returns": {
          "isCompleted": "True if the request has completed and a random number is available, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "randomNumber(uint32)": {
        "params": {
          "requestId": "The ID of the request used to get the results of the RNG service"
        },
        "returns": {
          "randomNum": "The random number"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestRandomNumber()": {
        "details": "Some services will complete the request immediately, others may have a time-delaySome services require payment in the form of a token, such as $LINK for Chainlink VRF",
        "returns": {
          "lockBlock": "The block number at which the RNG service will start generating time-delayed randomness.  The calling contract should \"lock\" all activity until the result is available via the `requestId`",
          "requestId": "The ID of the request used to get the results of the RNG service"
        }
      },
      "requestRandomness(bytes32,uint256,uint256)": {
        "details": "The source of the seed data must be something which the oraclecannot anticipate. See \"SECURITY CONSIDERATIONS\" above.The fulfillRandomness method receives the output, once it's providedby the Oracle, and verified by the vrfCoordinator.The _keyHash must already be registered with the VRFCoordinator, andthe _fee must exceed the fee specified during registration of the_keyHash.The returned requestId can be used to distinguish responses to *concurrent requests. It is passed as the first argument tofulfillRandomness.",
        "params": {
          "_fee": "The amount of LINK to send with the request",
          "_keyHash": "ID of public key against which randomness is generated",
          "_seed": "Random seed from which output randomness is determined"
        },
        "returns": {
          "requestId": "which will be returned with the response to this request"
        }
      },
      "setFee(uint256)": {
        "params": {
          "_fee": "The fee to be charged for a request"
        }
      },
      "setKeyhash(bytes32)": {
        "params": {
          "_keyhash": "The keyhash to be used by the VRF"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 75,
        "contract": "contracts/RNGChainlink.sol:RNGChainlink",
        "label": "LINK",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(LinkTokenInterface)245"
      },
      {
        "astId": 77,
        "contract": "contracts/RNGChainlink.sol:RNGChainlink",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 81,
        "contract": "contracts/RNGChainlink.sol:RNGChainlink",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 415,
        "contract": "contracts/RNGChainlink.sol:RNGChainlink",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1266,
        "contract": "contracts/RNGChainlink.sol:RNGChainlink",
        "label": "keyHash",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 1268,
        "contract": "contracts/RNGChainlink.sol:RNGChainlink",
        "label": "fee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1270,
        "contract": "contracts/RNGChainlink.sol:RNGChainlink",
        "label": "requestCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 1274,
        "contract": "contracts/RNGChainlink.sol:RNGChainlink",
        "label": "randomNumbers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 1278,
        "contract": "contracts/RNGChainlink.sol:RNGChainlink",
        "label": "requestLockBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint32,t_uint32)"
      },
      {
        "astId": 1282,
        "contract": "contracts/RNGChainlink.sol:RNGChainlink",
        "label": "chainlinkRequestIds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LinkTokenInterface)245": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}